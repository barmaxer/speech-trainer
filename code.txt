import React, { useState, useRef, useEffect, useCallback } from 'react';
import { Mic, StopCircle, Loader2, Sparkles, BarChart3, Play, Languages, TrendingUp, Target, Zap, Clock, MessageSquare, Award, ChevronRight, History, Flame, X, Trophy, CheckCircle2 } from 'lucide-react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import { 
  getFirestore, 
  doc, 
  getDoc, 
  setDoc, 
  addDoc, 
  collection, 
  query, 
  getDocs, 
  limit, 
  setLogLevel 
} from 'firebase/firestore';


// –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è AI
const SYSTEM_PROMPT = `
–í—ã - –æ–ø—ã—Ç–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä –ø–æ –ø—É–±–ª–∏—á–Ω—ã–º –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è–º. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã —Ä–µ—á–µ–π.
–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–∞–∫, –∫–∞–∫ –±—É–¥—Ç–æ –≤—ã —Å–ª—ã—à–∞–ª–∏ —Å–∞–º—É —Ä–µ—á—å, –∞ –Ω–µ —á–∏—Ç–∞–ª–∏ —Ç–µ–∫—Å—Ç.
–í–∞—à–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–π, –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π –∏ –¥–µ–π—Å—Ç–≤–µ–Ω–Ω–æ–π.
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ—á—å –ø–æ —Ç–∞–∫–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:
1. **–¢–µ–º–ø —Ä–µ—á–∏** - –ø–æ–¥—Å—á–∏—Ç–∞–π—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É (–Ω–æ—Ä–º–∞ 120-150)
2. **–ß–µ—Ç–∫–æ—Å—Ç—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞** - –Ω–∞—Å–∫–æ–ª—å–∫–æ –ª–æ–≥–∏—á–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ —Ä–µ—á—å
3. **–°–ª–æ–≤–∞-–ø–∞—Ä–∞–∑–∏—Ç—ã** - –Ω–∞–π–¥–∏—Ç–µ –∏ –ø–æ–¥—Å—á–∏—Ç–∞–π—Ç–µ —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: "—Ç–∏–ø–∞", "–∫–∞–∫ –±—ã", "–Ω—É", "—ç-—ç-—ç", "–≤–æ—Ç", "–∫–æ—Ä–æ—á–µ", "–∑–Ω–∞—á–∏—Ç", "–≤ –æ–±—â–µ–º"
4. **–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Å–ª–æ–≤–∞—Ä—è** - –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–∞ –ª–µ–∫—Å–∏–∫–∞
5. **–î–ª–∏–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π** - —Å—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 10-20 —Å–ª–æ–≤)

–í—ã –¥–æ–ª–∂–Ω—ã –≤–µ—Ä–Ω—É—Ç—å –¢–û–õ–¨–ö–û JSON-–æ–±—ä–µ–∫—Ç —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π.
`;

// –°—Ö–µ–º–∞ JSON –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
const JSON_SCHEMA = {
  type: "OBJECT",
  properties: {
    "score": { type: "NUMBER", description: "–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ 0-100" },
    "metrics": {
      type: "OBJECT",
      properties: {
        "pace": { type: "NUMBER", description: "–¢–µ–º–ø –≤ —Å–ª–æ–≤–∞—Ö/–º–∏–Ω—É—Ç—É" },
        "fillerWords": { type: "NUMBER", description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤-–ø–∞—Ä–∞–∑–∏—Ç–æ–≤" },
        "clarity": { type: "NUMBER", description: "–ß–µ—Ç–∫–æ—Å—Ç—å 0-100" },
        "vocabulary": { type: "NUMBER", description: "–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å–ª–æ–≤–∞—Ä—è 0-100" }
      }
    },
    "analysis": { type: "STRING", description: "–ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è" },
    "strengths": { type: "ARRAY", items: { type: "STRING" }, description: "2 —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã" },
    "improvements": { type: "ARRAY", items: { type: "STRING" }, description: "2 –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è" }
  },
  required: ["score", "metrics", "analysis", "strengths", "improvements"]
};

// –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏
const EXERCISES = [
  { id: 1, title: "–°–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", prompt: "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥", duration: 60, icon: Target, color: "blue" },
  { id: 2, title: "–£–±–µ–∂–¥–µ–Ω–∏–µ", prompt: "–£–±–µ–¥–∏—Ç–µ –∫—É–ø–∏—Ç—å –≤–∞—à –ª—é–±–∏–º—ã–π –ø—Ä–æ–¥—É–∫—Ç", duration: 90, icon: Zap, color: "purple" },
  { id: 3, title: "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ", prompt: "–û–±—ä—è—Å–Ω–∏—Ç–µ —Å–ª–æ–∂–Ω—É—é —Ç–µ–º—É –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏", duration: 120, icon: MessageSquare, color: "green" },
  { id: 4, title: "–ò—Å—Ç–æ—Ä–∏—è", prompt: "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –∂–∏–∑–Ω–∏", duration: 90, icon: Sparkles, color: "pink" }
];

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ—Ç—Ä–∏–∫–∏
const MetricCard = ({ icon: Icon, label, value, suffix = "", color = "blue" }) => (
  <div className="bg-white rounded-2xl p-4 shadow-sm border border-gray-100">
    <div className={`w-10 h-10 rounded-full bg-${color}-50 flex items-center justify-center mb-3`}>
      <Icon className={`w-5 h-5 text-${color}-500`} />
    </div>
    <div className="text-2xl font-semibold text-gray-900">{value}{suffix}</div>
    <div className="text-sm text-gray-500 mt-1">{label}</div>
  </div>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
const AnalysisResult = ({ result, audioURL, onReset, onSave }) => {
  const scoreColor = result.score >= 80 ? 'green' : result.score >= 60 ? 'blue' : 'orange';
  
  return (
    <div className="w-full space-y-4 animate-fade-in">
      {/* –ë–æ–ª—å—à–∞—è –æ—Ü–µ–Ω–∫–∞ */}
      <div className={`relative overflow-hidden bg-gradient-to-br from-${scoreColor}-500 to-${scoreColor}-600 rounded-3xl p-8 text-white shadow-xl`}>
        <div className="absolute top-0 right-0 w-64 h-64 bg-white opacity-5 rounded-full -mr-32 -mt-32"></div>
        <div className="relative">
          <div className="flex items-center justify-between mb-4">
            <span className="text-white/80 text-sm font-medium">–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞</span>
            <Award className="w-6 h-6 text-white/80" />
          </div>
          <div className="text-7xl font-bold mb-2">{result.score}</div>
          <div className="text-white/90 text-lg">
            {result.score >= 80 ? '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéâ' : result.score >= 60 ? '–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üëç' : '–ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏! üí™'}
          </div>
        </div>
      </div>

      {/* –ú–µ—Ç—Ä–∏–∫–∏ */}
      <div className="grid grid-cols-2 gap-3">
        <MetricCard icon={Clock} label="–¢–µ–º–ø —Ä–µ—á–∏" value={result.metrics.pace} suffix=" —Å–ª/–º–∏–Ω" color="blue" />
        <MetricCard icon={Zap} label="–ü–∞—Ä–∞–∑–∏—Ç—ã" value={result.metrics.fillerWords} color="orange" />
        <MetricCard icon={Target} label="–ß–µ—Ç–∫–æ—Å—Ç—å" value={result.metrics.clarity} suffix="%" color="green" />
        <MetricCard icon={MessageSquare} label="–°–ª–æ–≤–∞—Ä—å" value={result.metrics.vocabulary} suffix="%" color="purple" />
      </div>

      {/* –ê—É–¥–∏–æ –ø–ª–µ–µ—Ä */}
      {audioURL && (
        <div className="bg-gray-50 rounded-2xl p-5">
          <div className="flex items-center mb-3">
            <Play className="w-5 h-5 text-gray-400 mr-2" />
            <span className="text-sm font-medium text-gray-700">–ü—Ä–æ—Å–ª—É—à–∞—Ç—å –∑–∞–ø–∏—Å—å</span>
          </div>
          <audio controls src={audioURL} className="w-full h-12">
            Your browser does not support the audio element.
          </audio>
        </div>
      )}

      {/* –ê–Ω–∞–ª–∏–∑ */}
      <div className="bg-white rounded-2xl p-5 shadow-sm border border-gray-100">
        <h3 className="text-base font-semibold text-gray-900 mb-3 flex items-center">
          <BarChart3 className="w-5 h-5 mr-2 text-blue-500" />
          –ê–Ω–∞–ª–∏–∑
        </h3>
        <p className="text-gray-700 leading-relaxed">{result.analysis}</p>
      </div>

      {/* –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ —É–ª—É—á—à–µ–Ω–∏—è */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
        <div className="bg-green-50 rounded-2xl p-5 border border-green-100">
          <h3 className="text-sm font-semibold text-green-900 mb-3 flex items-center">
            <CheckCircle2 className="w-4 h-4 mr-2" />
            –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
          </h3>
          <ul className="space-y-2">
            {result.strengths.map((item, i) => (
              <li key={i} className="text-sm text-green-800 flex items-start">
                <span className="text-green-500 mr-2">‚Ä¢</span>
                {item}
              </li>
            ))}
          </ul>
        </div>
        
        <div className="bg-blue-50 rounded-2xl p-5 border border-blue-100">
          <h3 className="text-sm font-semibold text-blue-900 mb-3 flex items-center">
            <Target className="w-4 h-4 mr-2" />
            –ù–∞–¥ —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å
          </h3>
          <ul className="space-y-2">
            {result.improvements.map((item, i) => (
              <li key={i} className="text-sm text-blue-800 flex items-start">
                <span className="text-blue-500 mr-2">‚Ä¢</span>
                {item}
              </li>
            ))}
          </ul>
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
      <div className="flex gap-3">
        <button
          onClick={onSave}
          className="flex-1 bg-blue-500 hover:bg-blue-600 text-white py-4 rounded-2xl font-semibold transition-all duration-200 shadow-lg shadow-blue-500/30"
        >
          –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        </button>
        <button
          onClick={onReset}
          className="flex-1 bg-gray-100 hover:bg-gray-200 text-gray-900 py-4 rounded-2xl font-semibold transition-all duration-200"
        >
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏
const HistoryView = ({ history, onClose, onReplay }) => (
  <div className="fixed inset-0 bg-black/60 backdrop-blur-sm z-50 flex items-center justify-center p-4">
    <div className="bg-white rounded-3xl w-full max-w-2xl max-h-[90vh] overflow-hidden shadow-2xl">
      <div className="p-6 border-b border-gray-100 flex items-center justify-between">
        <div className="flex items-center">
          <History className="w-6 h-6 text-blue-500 mr-3" />
          <h2 className="text-xl font-bold text-gray-900">–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</h2>
        </div>
        <button onClick={onClose} className="w-10 h-10 rounded-full bg-gray-100 hover:bg-gray-200 flex items-center justify-center transition-colors">
          <X className="w-5 h-5 text-gray-600" />
        </button>
      </div>
      
      <div className="p-6 overflow-y-auto max-h-[calc(90vh-100px)]">
        {history.length === 0 ? (
          <div className="text-center py-12">
            <History className="w-16 h-16 text-gray-300 mx-auto mb-4" />
            <p className="text-gray-500">–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π</p>
            <p className="text-sm text-gray-400 mt-2">–ù–∞—á–Ω–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å</p>
          </div>
        ) : (
          <div className="space-y-3">
            {history.map((item) => (
              <div key={item.id} className="bg-gray-50 rounded-2xl p-4 hover:bg-gray-100 transition-colors cursor-pointer" onClick={() => onReplay(item)}>
                <div className="flex items-center justify-between mb-2">
                  <span className="text-sm text-gray-500">{item.date}</span>
                  <span className={`text-2xl font-bold ${item.score >= 80 ? 'text-green-500' : item.score >= 60 ? 'text-blue-500' : 'text-orange-500'}`}>
                    {item.score}
                  </span>
                </div>
                <div className="grid grid-cols-4 gap-2 text-xs text-gray-600">
                  <div>
                    <div className="text-gray-400">–¢–µ–º–ø</div>
                    <div className="font-medium">{item.metrics.pace}</div>
                  </div>
                  <div>
                    <div className="text-gray-400">–ü–∞—Ä–∞–∑–∏—Ç—ã</div>
                    <div className="font-medium">{item.metrics.fillerWords}</div>
                  </div>
                  <div>
                    <div className="text-gray-400">–ß–µ—Ç–∫–æ—Å—Ç—å</div>
                    <div className="font-medium">{item.metrics.clarity}%</div>
                  </div>
                  <div>
                    <div className="text-gray-400">–°–ª–æ–≤–∞—Ä—å</div>
                    <div className="font-medium">{item.metrics.vocabulary}%</div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  </div>
);

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
export default function App() {
  const [view, setView] = useState('home'); // home | recording | result
  const [status, setStatus] = useState('idle'); // idle | recording | loading
  const [transcript, setTranscript] = useState('');
  const [finalTranscript, setFinalTranscript] = useState('');
  const [audioURL, setAudioURL] = useState(null);
  const [analysisResult, setAnalysisResult] = useState(null);
  const [error, setError] = useState(null);
  const [selectedLang, setSelectedLang] = useState('ru-RU');
  const [selectedExercise, setSelectedExercise] = useState(null);
  const [recordingTime, setRecordingTime] = useState(0);
  const [history, setHistory] = useState([]);
  const [showHistory, setShowHistory] = useState(false);
  const [streak, setStreak] = useState(0);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ Firebase
  const [db, setDb] = useState(null);
  const [auth, setAuth] = useState(null);
  const [userId, setUserId] = useState(null);
  const [isAuthReady, setIsAuthReady] = useState(false);

  const mediaRecorderRef = useRef(null);
  const speechRecognizerRef = useRef(null);
  const audioChunksRef = useRef([]);
  const timerRef = useRef(null);
  const appIdRef = useRef(typeof __app_id !== 'undefined' ? __app_id : 'default-app-id');

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
  useEffect(() => {
    const firebaseConfigStr = typeof __firebase_config !== 'undefined' ? __firebase_config : '{}';
    
    if (firebaseConfigStr === '{}') {
        console.error("Firebase config is not available.");
        setError("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.");
        return;
    }

    try {
      const firebaseConfig = JSON.parse(firebaseConfigStr);
      const app = initializeApp(firebaseConfig);
      const authInstance = getAuth(app);
      const dbInstance = getFirestore(app);
      setLogLevel('Debug'); // –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Firestore
      
      setDb(dbInstance);
      setAuth(authInstance);

      const unsubscribe = onAuthStateChanged(authInstance, async (user) => {
        let currentUserId;
        if (user) {
          currentUserId = user.uid;
        } else {
          try {
            const token = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
            if (token) {
              const userCredential = await signInWithCustomToken(authInstance, token);
              currentUserId = userCredential.user.uid;
            } else {
              const userCredential = await signInAnonymously(authInstance);
              currentUserId = userCredential.user.uid;
            }
          } catch (authError) {
            console.error("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", authError);
            setError("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –§—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.");
            currentUserId = `guest-${crypto.randomUUID()}`; // Fallback
          }
        }
        setUserId(currentUserId);
        setIsAuthReady(true);
      });

      return () => unsubscribe();

    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Firebase:", e);
      setError("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è.");
    }
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  useEffect(() => {
    if (isAuthReady && db && userId) {
      loadHistory();
      loadStreak();
    }
  }, [isAuthReady, db, userId]);

  const loadHistory = async () => {
    if (!db || !userId) return;
    try {
      const historyCol = collection(db, `artifacts/${appIdRef.current}/users/${userId}/speech-history`);
      const q = query(historyCol, limit(20)); // –ë–µ–∑ orderBy, –∫–∞–∫ –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
      const querySnapshot = await getDocs(q);
      
      const fetchedHistory = querySnapshot.docs.map(doc => {
          const data = doc.data();
          return {
              id: doc.id, 
              ...data,
              timestamp: data.timestamp?.toDate ? data.timestamp.toDate() : new Date(data.date),
              // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—è –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏–∑ analysisResult
              score: data.analysisResult.score, 
              metrics: data.analysisResult.metrics
          }
      });

      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤ –ø–∞–º—è—Ç–∏
      fetchedHistory.sort((a, b) => b.timestamp - a.timestamp);
      setHistory(fetchedHistory);
    } catch (error) {
      console.log('–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
    }
  };

  const loadStreak = async () => {
    if (!db || !userId) return;
    try {
      const streakDocRef = doc(db, `artifacts/${appIdRef.current}/users/${userId}/speech-data/streak`);
      const docSnap = await getDoc(streakDocRef);
      
      if (docSnap.exists()) {
        const data = docSnap.data();
        const today = new Date().toDateString();
        const lastDate = new Date(data.lastDate).toDateString();
        const yesterday = new Date(Date.now() - 86400000).toDateString();
        
        if (lastDate === today) {
          setStreak(data.streak);
        } else if (lastDate === yesterday) {
          setStreak(data.streak); // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        } else {
          setStreak(0); // C–µ—Ä–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞
        }
      }
    } catch (error) {
      console.log('Streak –Ω–µ –Ω–∞–π–¥–µ–Ω:', error);
    }
  };

  const saveToHistory = async (result) => {
    if (!db || !userId) {
       console.error("Firestore –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.");
       resetApp(); // –°–±—Ä–æ—Å, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–µ
       return;
    }

    // –í–Ω–∏–º–∞–Ω–∏–µ: audioURL - —ç—Ç–æ blob URL, –æ–Ω –±—É–¥–µ—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏.
    // –î–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–∞—Å—å –±—ã –∑–∞–≥—Ä—É–∑–∫–∞ –≤ Firebase Storage.
    const newEntry = {
      date: new Date().toLocaleString('ru-RU'),
      timestamp: new Date(),
      audioURL: audioURL, 
      transcript: finalTranscript,
      analysisResult: result // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –∞–Ω–∞–ª–∏–∑–∞
    };
    
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏
      const historyCol = collection(db, `artifacts/${appIdRef.current}/users/${userId}/speech-history`);
      const docRef = await addDoc(historyCol, newEntry);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const displayEntry = {
          id: docRef.id,
          ...newEntry,
          score: result.score,
          metrics: result.metrics,
      };
      setHistory(prevHistory => [displayEntry, ...prevHistory].slice(0, 20));

      // –û–±–Ω–æ–≤–ª—è–µ–º c–µ—Ä–∏—é
      const today = new Date().toDateString();
      const streakDocRef = doc(db, `artifacts/${appIdRef.current}/users/${userId}/speech-data/streak`);
      const streakDocSnap = await getDoc(streakDocRef);
      let currentStreak = 0;

      if (streakDocSnap.exists()) {
          const data = streakDocSnap.data();
          const lastDate = new Date(data.lastDate).toDateString();
          const yesterday = new Date(Date.now() - 86400000).toDateString();
          if (lastDate === today) {
              currentStreak = data.streak; // –£–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏—Å—å —Å–µ–≥–æ–¥–Ω—è
          } else if (lastDate === yesterday) {
              currentStreak = data.streak + 1; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º
          } else {
              currentStreak = 1; // –ù–æ–≤–∞—è —Å–µ—Ä–∏—è
          }
      } else {
          currentStreak = 1; // –°–∞–º–∞—è –ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å
      }

      const streakData = { streak: currentStreak, lastDate: today };
      await setDoc(streakDocRef, streakData);
      setStreak(currentStreak);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    }
    
    resetApp(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  };

  // –¢–∞–π–º–µ—Ä –∑–∞–ø–∏—Å–∏
  useEffect(() => {
    if (status === 'recording') {
      timerRef.current = setInterval(() => {
        setRecordingTime(prev => prev + 1);
      }, 1000);
    } else {
      if (timerRef.current) clearInterval(timerRef.current);
      setRecordingTime(0);
    }
    return () => {
      if (timerRef.current) clearInterval(timerRef.current);
    };
  }, [status]);

  const fetchWithBackoff = async (url, options, retries = 3, delay = 1000) => {
    try {
      const response = await fetch(url, options);
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      return await response.json();
    } catch (err) {
      if (retries > 0) {
        await new Promise(res => setTimeout(res, delay));
        return fetchWithBackoff(url, options, retries - 1, delay * 2);
      } else {
        throw err;
      }
    }
  };

  const runAnalysis = useCallback(async (speechText) => {
    if (!speechText || speechText.trim().length < 10) {
      setError("–ó–∞–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å –¥–æ–ª—å—à–µ.");
      setStatus('idle');
      setView('home');
      return;
    }
    
    setStatus('loading');
    setError(null);

    const apiKey = ""; // API-–∫–ª—é—á –±—É–¥–µ—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω —Å—Ä–µ–¥–æ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å Gemini
    const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-09-2025:generateContent?key=${apiKey}`;

    const payload = {
      contents: [{ parts: [{ text: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É —Ä–µ—á—å:\n\n"${speechText}"` }] }],
      systemInstruction: { parts: [{ text: SYSTEM_PROMPT }] },
      generationConfig: {
        responseMimeType: "application/json",
        responseSchema: JSON_SCHEMA,
      }
    };

    try {
      const result = await fetchWithBackoff(API_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      const candidate = result.candidates?.[0];
      if (candidate && candidate.content?.parts?.[0]?.text) {
        const parsedResult = JSON.parse(candidate.content.parts[0].text);
        setAnalysisResult(parsedResult);
        setStatus('idle');
        setView('result');
      } else {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –æ—Ç AI.");
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:", err);
      setError(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${err.message}`);
      setStatus('idle');
      setView('home');
    }
  }, []);

  const startRecording = async () => {
    setView('recording');
    setStatus('recording');
    setError(null);
    setTranscript('');
    setFinalTranscript('');
    setAudioURL(null);
    setAnalysisResult(null);
    audioChunksRef.current = [];

    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });

      mediaRecorderRef.current = new MediaRecorder(stream);
      mediaRecorderRef.current.ondataavailable = (event) => {
        audioChunksRef.current.push(event.data);
      };
      mediaRecorderRef.current.onstop = () => {
        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/wav' });
        const url = URL.createObjectURL(audioBlob);
        setAudioURL(url);
      };

      const SpeechRecognitionAPI = window.SpeechRecognition || window.webkitSpeechRecognition;
      if (!SpeechRecognitionAPI) {
        throw new Error("API —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ.");
      }
      
      speechRecognizerRef.current = new SpeechRecognitionAPI();
      speechRecognizerRef.current.lang = selectedLang;
      speechRecognizerRef.current.interimResults = true;
      speechRecognizerRef.current.continuous = true;

      speechRecognizerRef.current.onresult = (event) => {
        let interim = '';
        let final = '';
        for (let i = 0; i < event.results.length; i++) {
          if (event.results[i].isFinal) {
            final += event.results[i][0].transcript + ' ';
          } else {
            interim += event.results[i][0].transcript;
          }
        }
        setTranscript(final + interim);
        setFinalTranscript(final.trim());
      };

      speechRecognizerRef.current.onerror = (event) => {
        console.error("–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:", event.error);
        setError(`–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: ${event.error}`);
      };

      mediaRecorderRef.current.start();
      speechRecognizerRef.current.start();

    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É:", err);
      setError(`–û—à–∏–±–∫–∞: ${err.message}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏ –≤—ã –¥–∞–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.`);
      setStatus('idle');
      setView('home');
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current) mediaRecorderRef.current.stop();
    if (speechRecognizerRef.current) speechRecognizerRef.current.stop();
    
    setTimeout(() => {
      setFinalTranscript(prevFinal => {
        const textToAnalyze = prevFinal || transcript;
        runAnalysis(textToAnalyze);
        return textToAnalyze;
      });
    }, 500);
  };

  const resetApp = () => {
    setView('home');
    setStatus('idle');
    // –û—à–∏–±–∫—É –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–µ –≤–∏–¥–µ–ª
    // setError(null); 
    setTranscript('');
    setFinalTranscript('');
    setAudioURL(null);
    setAnalysisResult(null);
    setSelectedExercise(null);
    audioChunksRef.current = [];
  };

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  // HOME VIEW
  if (view === 'home') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 p-4 sm:p-6">
        <div className="max-w-4xl mx-auto">
          {/* Header */}
          <div className="text-center mb-8">
            <div className="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-3xl mb-4 shadow-lg">
              <Sparkles className="w-8 h-8 text-white" />
            </div>
            <h1 className="text-4xl font-bold text-gray-900 mb-2">–¢—Ä–µ–Ω–µ—Ä –ø–æ —Ä–µ—á–∏</h1>
            <p className="text-gray-600">–£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –ø—É–±–ª–∏—á–Ω—ã—Ö –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π</p>
          </div>

          {/* Stats */}
          <div className="grid grid-cols-2 gap-4 mb-6">
            <div className="bg-white rounded-3xl p-5 shadow-sm border border-gray-100">
              <div className="flex items-center justify-between">
                <div>
                  <div className="text-3xl font-bold text-gray-900">{history.length}</div>
                  <div className="text-sm text-gray-500 mt-1">–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</div>
                </div>
                <TrendingUp className="w-8 h-8 text-blue-500" />
              </div>
            </div>
            <div className="bg-white rounded-3xl p-5 shadow-sm border border-gray-100">
              <div className="flex items-center justify-between">
                <div>
                  <div className="text-3xl font-bold text-gray-900">{streak}</div>
                  <div className="text-sm text-gray-500 mt-1">–î–Ω–µ–π –ø–æ–¥—Ä—è–¥</div>
                </div>
                <Flame className="w-8 h-8 text-orange-500" />
              </div>
            </div>
          </div>

          {/* Language selector */}
          <div className="bg-white rounded-3xl p-5 shadow-sm border border-gray-100 mb-6">
            <div className="flex items-center justify-between mb-3">
              <div className="flex items-center">
                <Languages className="w-5 h-5 text-gray-400 mr-2" />
                <span className="text-sm font-medium text-gray-700">–Ø–∑—ã–∫ —Ä–µ—á–∏</span>
              </div>
              <div className="flex gap-2">
                <button
                  onClick={() => setSelectedLang('ru-RU')}
                  className={`px-4 py-2 rounded-xl text-sm font-medium transition-all ${
                    selectedLang === 'ru-RU'
                      ? 'bg-blue-500 text-white shadow-lg shadow-blue-500/30'
                      : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                  }`}
                >
                  –†—É—Å—Å–∫–∏–π
                </button>
                <button
                  onClick={() => setSelectedLang('en-US')}
                  className={`px-4 py-2 rounded-xl text-sm font-medium transition-all ${
                    selectedLang === 'en-US'
                      ? 'bg-blue-500 text-white shadow-lg shadow-blue-500/30'
                      : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                  }`}
                >
                  English
                </button>
              </div>
            </div>
          </div>

          {/* Exercises */}
          <div className="mb-6">
            <h2 className="text-xl font-bold text-gray-900 mb-4">–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è</h2>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
              {EXERCISES.map((exercise) => (
                <button
                  key={exercise.id}
                  onClick={() => {
                    setSelectedExercise(exercise);
                    startRecording();
                  }}
                  className="bg-white rounded-3xl p-5 shadow-sm border border-gray-100 hover:shadow-lg hover:scale-[1.02] transition-all text-left group"
                >
                  <div className={`w-12 h-12 rounded-2xl bg-${exercise.color}-50 flex items-center justify-center mb-3 group-hover:scale-110 transition-transform`}>
                    <exercise.icon className={`w-6 h-6 text-${exercise.color}-500`} />
                  </div>
                  <h3 className="font-semibold text-gray-900 mb-1">{exercise.title}</h3>
                  <p className="text-sm text-gray-600 mb-2">{exercise.prompt}</p>
                  <div className="flex items-center text-xs text-gray-500">
                    <Clock className="w-3 h-3 mr-1" />
                    {exercise.duration} —Å–µ–∫—É–Ω–¥
                  </div>
                </button>
              ))}
            </div>
          </div>

          {/* Free practice */}
          <button
            onClick={startRecording}
            className="w-full bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white py-6 rounded-3xl font-semibold text-lg shadow-xl shadow-blue-500/30 hover:shadow-2xl hover:scale-[1.02] transition-all flex items-center justify-center gap-3"
          >
            <Mic className="w-6 h-6" />
            –°–≤–æ–±–æ–¥–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞
            <ChevronRight className="w-5 h-5" />
          </button>

          {/* History button */}
          <button
            onClick={() => setShowHistory(true)}
            className="w-full mt-4 bg-gray-100 hover:bg-gray-200 text-gray-900 py-4 rounded-3xl font-semibold transition-all flex items-center justify-center gap-2"
          >
            <History className="w-5 h-5" />
            –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
          </button>

          {error && (
            <div className="mt-4 bg-red-50 border border-red-200 text-red-800 p-4 rounded-2xl text-sm">
              {error}
            </div>
          )}
        </div>

        {showHistory && (
          <HistoryView 
            history={history} 
            onClose={() => setShowHistory(false)}
            onReplay={(item) => {
              // –¢–µ–ø–µ—Ä—å –º—ã –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
              setAnalysisResult(item.analysisResult);
              setAudioURL(item.audioURL);
              setFinalTranscript(item.transcript);
              setView('result');
              setShowHistory(false);
            }}
          />
        )}
      </div>
    );
  }

  // RECORDING VIEW
  if (view === 'recording') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 flex items-center justify-center p-4">
        <div className="w-full max-w-2xl">
          <div className="bg-white rounded-3xl shadow-2xl p-8 sm:p-12">
            {/* Exercise info */}
            {selectedExercise && (
              <div className="text-center mb-8 pb-8 border-b border-gray-100">
                <div className={`w-16 h-16 rounded-3xl bg-${selectedExercise.color}-50 flex items-center justify-center mx-auto mb-4`}>
                  <selectedExercise.icon className={`w-8 h-8 text-${selectedExercise.color}-500`} />
                </div>
                <h2 className="text-2xl font-bold text-gray-900 mb-2">{selectedExercise.title}</h2>
                <p className="text-gray-600">{selectedExercise.prompt}</p>
              </div>
            )}

            {/* Recording indicator */}
            <div className="flex flex-col items-center mb-8">
              <div className="relative mb-6">
                <div className="absolute inset-0 bg-red-500 rounded-full animate-ping opacity-75"></div>
                <button
                  onClick={stopRecording}
                  className="relative w-32 h-32 bg-red-500 hover:bg-red-600 rounded-full flex items-center justify-center text-white transition-all shadow-2xl shadow-red-500/50"
                >
                  <StopCircle className="w-16 h-16" />
                </button>
              </div>

              <div className="text-center">
                <div className="text-5xl font-bold text-gray-900 mb-2">{formatTime(recordingTime)}</div>
                <div className="text-gray-600 font-medium">–ò–¥–µ—Ç –∑–∞–ø–∏—Å—å...</div>
              </div>
            </div>

            {/* Live transcript */}
            {transcript && (
              <div className="bg-gray-50 rounded-2xl p-6 min-h-[120px] max-h-[200px] overflow-y-auto border border-gray-100">
                <div className="text-sm text-gray-500 mb-2 flex items-center">
                  <MessageSquare className="w-4 h-4 mr-2" />
                  –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                </div>
                <p className="text-gray-800 leading-relaxed">{transcript}</p>
              </div>
            )}

            <button
              onClick={stopRecording}
              className="w-full mt-6 bg-blue-500 hover:bg-blue-600 text-white py-4 rounded-2xl font-semibold transition-all shadow-lg shadow-blue-500/30"
            >
              –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
            </button>
          </div>
        </div>
      </div>
    );
  }

  // LOADING VIEW
  if (status === 'loading') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 flex items-center justify-center p-4">
        <div className="text-center">
          <div className="w-24 h-24 bg-white rounded-3xl shadow-2xl flex items-center justify-center mb-6 mx-auto">
            <Loader2 className="w-12 h-12 text-blue-500 animate-spin" />
          </div>
          <h2 className="text-2xl font-bold text-gray-900 mb-2">–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à—É —Ä–µ—á—å</h2>
          <p className="text-gray-600">–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...</p>
          <div className="flex justify-center gap-2 mt-6">
            <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0ms' }}></div>
            <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '150ms' }}></div>
            <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '300ms' }}></div>
          </div>
        </div>
      </div>
    );
  }

  // RESULT VIEW
  if (view === 'result' && analysisResult) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 p-4 sm:p-6">
        <div className="max-w-4xl mx-auto">
          {/* Header */}
          <div className="flex items-center justify-between mb-6">
            <button
              onClick={resetApp}
              className="w-10 h-10 rounded-full bg-white hover:bg-gray-100 flex items-center justify-center transition-all shadow-sm"
            >
              <ChevronRight className="w-5 h-5 text-gray-600 rotate-180" />
            </button>
            <div className="flex items-center gap-2">
              <Trophy className="w-5 h-5 text-yellow-500" />
              <span className="text-sm font-medium text-gray-600">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</span>
            </div>
            <div className="w-10"></div>
          </div>

          <AnalysisResult 
            result={analysisResult}
            audioURL={audioURL}
            onReset={resetApp}
            onSave={() => {
              saveToHistory(analysisResult);
              // resetApp() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ saveToHistory
            }}
          />
        </div>
      </div>
    );
  }

  return null;
}
